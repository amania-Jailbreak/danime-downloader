name: Build Multi-Platform Executables

on:
    push:
        branches: [main]
        tags: ["v*"]
    pull_request:
        branches: [main]
    workflow_dispatch:

jobs:
    build:
        strategy:
            matrix:
                os: [windows-latest, ubuntu-latest, macos-intel, macos-arm64]
                include:
                    - os: windows-latest
                      executable_name: DAnimeDownloader.exe
                      artifact_name: DAnimeDownloader-windows
                    - os: ubuntu-latest
                      executable_name: DAnimeDownloader
                      artifact_name: DAnimeDownloader-linux
                    - os: macos-intel
                      executable_name: DAnimeDownloader
                      artifact_name: DAnimeDownloader-macos-x86_64
                    - os: macos-arm64
                      executable_name: DAnimeDownloader
                      artifact_name: DAnimeDownloader-macos-arm64
        runs-on: ${{ matrix.os == 'macos-intel' && 'macos-13' || matrix.os == 'macos-arm64' && 'macos-latest' || matrix.os }}

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up Python
              uses: actions/setup-python@v5
              with:
                  python-version: "3.11"

            - name: Install system dependencies (Ubuntu)
              if: matrix.os == 'ubuntu-latest'
              run: |
                  sudo apt-get update
                  sudo apt-get install -y ffmpeg

            - name: Install system dependencies (macOS)
              if: startsWith(matrix.os, 'macos-')
              run: |
                  brew install ffmpeg

            - name: Install Python dependencies
              run: |
                  python -m pip install --upgrade pip
                  pip install -r requirements.txt
                  pip install pyinstaller

            - name: Build executable with PyInstaller (macOS-specific)
              if: startsWith(matrix.os, 'macos-')
              run: |
                  # PyInstallerのtargetオプションでアーキテクチャを指定
                  ARCHIVE_FILE="${{ matrix.executable_name }}"
                  if [ "${{ matrix.os }}" == "macos-intel" ]; then
                      pyinstaller main.py --target-architecture x86_64 --onefile --name "${ARCHIVE_FILE}"
                  else
                      pyinstaller main.py --target-architecture arm64 --onefile --name "${ARCHIVE_FILE}"
                  fi
              
            - name: Build executable with PyInstaller (non-macOS)
              if: startsWith(matrix.os, 'macos-') == false
              run: |
                  pyinstaller main.py --onefile --name "${{ matrix.executable_name }}"

            - name: Test executable (Windows)
              if: matrix.os == 'windows-latest'
              run: |
                  dist\${{ matrix.executable_name }} --help

            - name: Test executable (Unix)
              if: matrix.os != 'windows-latest' && startsWith(matrix.os, 'macos-') == false
              run: |
                  chmod +x dist/${{ matrix.executable_name }}
                  ./dist/${{ matrix.executable_name }} --help

            - name: Upload macOS artifact
              if: startsWith(matrix.os, 'macos-')
              uses: actions/upload-artifact@v4
              with:
                  name: ${{ matrix.artifact_name }}
                  path: dist/${{ matrix.executable_name }}

            - name: Upload other artifacts
              if: startsWith(matrix.os, 'macos-') == false
              uses: actions/upload-artifact@v4
              with:
                  name: ${{ matrix.artifact_name }}
                  path: dist/${{ matrix.executable_name }}

    create_universal_binary:
        needs: build
        if: startsWith(github.ref, 'refs/tags/')
        runs-on: macos-latest
        steps:
            - name: Download x86_64 artifact
              uses: actions/download-artifact@v4
              with:
                  name: DAnimeDownloader-macos-x86_64
                  path: ./build/x86_64

            - name: Download arm64 artifact
              uses: actions/download-artifact@v4
              with:
                  name: DAnimeDownloader-macos-arm64
                  path: ./build/arm64

            - name: Create universal binary
              run: |
                  UNIVERSAL_EXECUTABLE="DAnimeDownloader-macos"
                  lipo -create -output "${UNIVERSAL_EXECUTABLE}" ./build/x86_64/DAnimeDownloader ./build/arm64/DAnimeDownloader
                  chmod +x "${UNIVERSAL_EXECUTABLE}"
                  mv "${UNIVERSAL_EXECUTABLE}" ./dist/

            - name: Upload universal binary to release
              uses: softprops/action-gh-release@v1
              with:
                  files: dist/DAnimeDownloader-macos
                  draft: false
                  prerelease: false
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
